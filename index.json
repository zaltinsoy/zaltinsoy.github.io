[{"content":"\u003cp\u003eMETU Discover is a location-based augmented reality game focused on the flora of the METU campus. I have developed it as a part of my Master\u0026rsquo;s Thesis in Multimedia Informatics. I have used Firebase Database for the storage of the player and points of interest information.\u003c/p\u003e\n\u003cp\u003eOpenStreetMap is used for the map data.\nVisualization of the map is done by parsing and using the OSM data. It allows me to have complete visual control over the map visual as needed.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/mapView.png\" alt=\"Map View\"\u003e\u003c/p\u003e\n\u003cp\u003eI have used ARCore \u003ca href=\"https://developers.google.com/ar/develop/geospatial\"\u003eGeospatial API\u003c/a\u003e for the visualization of 3D anchors in the game.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/ARMode.png\" alt=\"AR Mode\"\u003e\u003c/p\u003e\n","description":"","image":"/images/metuDiscoverEditorSS.png","permalink":"https://zaltinsoy.github.io/projects/metudiscover/","title":"METU Discover"},{"content":"\u003ch1 id=\"atlas---mmi-541-game-physics-project\"\u003eATLAS - MMI 541 Game Physics Project\u003c/h1\u003e\n\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eAtlas is a 3D First Person Puzzle Game where the players will be in the role of the reincarnation of the Greek titan Atlas. The game will be consist of different test chambers. Player\u0026rsquo;s aim is to reach the exit of  each chamber. These test chambers will consist 3D puzzles and the player will use the different gravity manipulation powers to solve these puzzles and reach the end of the level. Game is developed in Unity platform, and Cyclone Physics Engine\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e  is used for the physics calculations in the game. Atlas developed as a term project in the MMI 541 Physics for Computer Games course.\u003c/p\u003e\n\u003cp\u003eWatch the video:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=5Bwc_DltdQE\u0026amp;ab_channel=ZaferAlt%C4%B1nsoy\"\u003e\u003cimg src=\"https://user-images.githubusercontent.com/81522783/158582402-f1d7f7de-252c-4129-93fa-d956d1850c2b.jpg\" alt=\"Watch the video\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGenre:\u003c/strong\u003e 3D First Person Single Player Puzzle Game\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePlatform:\u003c/strong\u003e Windows PC\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePlayer\u0026rsquo;s role:\u003c/strong\u003e Solve 3D puzzles with the ability of gravity manipulation\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"similar-games--inspiration-sources\"\u003eSimilar Games \u0026amp; Inspiration Sources\u003c/h2\u003e\n\u003cp\u003eFollowing games are popular 3D puzzle games,  they are not based on the gravity manipulation but they give inspirational for the creation of 3D puzzles.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePORTAL (2007)\u003c/li\u003e\n\u003cli\u003eQ.U.B.E (2012)\u003c/li\u003e\n\u003cli\u003eThe Talos Principle (2014)\u003c/li\u003e\n\u003cli\u003eThe Witness (2016)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollowing games are short students projects. These games are directly focused on the gravity manipulation. It is valuable to see how other games use the gravity manipulation as a game mechanic.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe Flaws of Gravity (2017)\u003c/li\u003e\n\u003cli\u003eGravitas (2019)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"game-development\"\u003eGame Development\u003c/h1\u003e\n\u003ch2 id=\"game-story\"\u003eGame Story\u003c/h2\u003e\n\u003cp\u003eIn the game setting, gods of the old are real. Mythological gods are secretly living together with humans for ages. They live, they die and they reincarnate. They born as normal humans. During their lifetime when they encounter a stressful /traumatic situation, they remember their past lives and gain their abilities.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLuxus\u003c/strong\u003e is a global multinational technology company. They are aware of the existence of the gods and they want to use these gods for their own gains.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMauri\u003c/strong\u003e is (unawarely) the latest reincarnation of the Atlas. \u003cstrong\u003eLuxus\u003c/strong\u003e abducted and imprisoned him. One day, they left the door open, but the door leads to a test chamber. Only way to get out of the room is using the ability of gravity manipulation. By this way, they force him to remember his old lives and manifest his powers. Their master plan is to use the Atlas\u0026rsquo;s powers for their own agenda.\u003c/p\u003e\n\u003ch2 id=\"environment\"\u003eEnvironment\u003c/h2\u003e\n\u003cp\u003eEach game level will be a test chamber. They will have a hospital like, sterile design in the first levels and cyberpunkish designs towards to end. These test chambers will have one entry and one exit door. Player needs to use their different abilities to the reach exit door (complete the level). There won\u0026rsquo;t be any NPC/enemy etc. in the chambers. Other than the puzzle related objects, rooms will be mostly empty. For the scope of the project, only first level of the game is developed.\u003c/p\u003e\n\u003ch2 id=\"gameplay\"\u003eGameplay\u003c/h2\u003e\n\u003cp\u003ePlayer will have 2 different gravity related power. Each level will be a 3D puzzle and player will use different powers to reach the end of the level.\u003c/p\u003e\n\u003ch3 id=\"powers\"\u003ePowers:\u003c/h3\u003e\n\u003ch4 id=\"p1-object-gravity-direction-change\"\u003eP1: Object Gravity Direction Change\u003c/h4\u003e\n\u003cp\u003e\u003cem\u003eNot every leaf falls to ground\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eNormally, gravity pulls all objects towards the ground. In other words, the gravitational force acts on the global -y direction for all objects. With this ability, player can change the direction of the gravitational force acting on some of the objects. Only rectangular prism shaped objects can be altered with this power. Any of the 6 faces can be chosen as \u0026ldquo;gravitation direction\u0026rdquo;.\u003c/p\u003e\n\u003ch4 id=\"p2-object-zero-gravity\"\u003eP2: Object Zero Gravity\u003c/h4\u003e\n\u003cp\u003e\u003cem\u003eThere is no force\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWith this ability player can reduce the gravitational force on an object to zero. Object will remain where it is up until a player or another object touches it or player dismiss the ability. If the object was on the ground or on another surface, it will remain to stay on there, if it is on the air, it will stay on the air.\u003c/p\u003e\n\u003ch2 id=\"physics-components\"\u003ePhysics Components\u003c/h2\u003e\n\u003cp\u003eBelow physics phenomenons will occur during the game:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRigid Body Physics\u003c/li\u003e\n\u003cli\u003eVelocity and Acceleration\u003c/li\u003e\n\u003cli\u003eGravity: Gravity direction of the objects will constantly change during the gameplay and they will fall to different surfaces.\u003c/li\u003e\n\u003cli\u003eCollision: Objects will be collide in the game. Therefore collision detection is one of the crucial parts of the game. Objects will not bounce back (coefficient of restitution is equal to 0) but they will drag others on the direction of the their gravitation. Objects with different gravity directions will affect each other.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"general-game-object-scripts\"\u003eGeneral Game Object Scripts\u003c/h3\u003e\n\u003cp\u003eC# port of Cyclone Physics Engine is used for the all physical interaction in the game. Following scripts are attached to all objects in the game.\u003c/p\u003e\n\u003ch4 id=\"particle-class\"\u003eParticle Class\u003c/h4\u003e\n\u003cp\u003eThis class used for containing main attributes of the game object like position, velocity, acceleration and inverse mass. It also includes the integration method of the objects.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       Vector3d position = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        velocity = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        forceAccum = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        acceleration = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        inverseMass = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e REAL();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        damping = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e REAL();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        GameObject particleObject = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e GameObject();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        damping = \u003cspan style=\"color:#ae81ff\"\u003e0.95\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (mass == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { inverseMass = mass; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e { inverseMass = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e / mass; }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e Particle integrate(REAL duration, Particle obje)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Vector3d resultingAcc = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//update linear position\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.position = Vector3d.addScaledVector(obje.position, obje.velocity,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tduration);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        resultingAcc = obje.acceleration;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        resultingAcc = Vector3d.addScaledVector(resultingAcc, obje.forceAccum, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tobje.inverseMass);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.acceleration = resultingAcc;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Update linear velocity from the acceleration;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.velocity = Vector3d.addScaledVector(obje.velocity, resultingAcc, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tduration);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//Impose drag\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.velocity.x *= Math.Pow(obje.damping, duration);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.velocity.y *= Math.Pow(obje.damping, duration);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.velocity.z *= Math.Pow(obje.damping, duration);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.forceAccum = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        obje.acceleration = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e obje;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"cyclone-runner\"\u003eCyclone Runner\u003c/h4\u003e\n\u003cp\u003eThis script calls Cyclone integration method each frame. Then update the position of the object in the game scene. Mainly it\u0026rsquo;s a interface between Cyclone and Unity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Update()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//integrate object over time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        particleObje = Particle.integrate(Time.deltaTime, particleObje);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e//apply new position to gameObject\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        transform.position = Vector3d.updatePosition(particleObje.position);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"collision-detection-and-resolution\"\u003eCollision Detection and Resolution\u003c/h3\u003e\n\u003cp\u003eOne collision script is developed for the both collision detection and collision resolution.\u003c/p\u003e\n\u003ch4 id=\"collision-detection\"\u003eCollision Detection\u003c/h4\u003e\n\u003cp\u003eCollision detection algorithm check in a loop whether chosen object collide with another object in the game and then continue this process for the next object. All objects in the game environments are rectangular prisms therefore it\u0026rsquo;s easier to detect their collisions.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u0026lt; numMoving; i++) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u0026lt; numMoving; j++) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i == j){\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                parGravy = gravy[i].GetComponent\u0026lt;Particle\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                parGravy2 = gravy[j].GetComponent\u0026lt;Particle\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                difference = Vector3d.disBetween(parGravy.position, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tparGravy2.position);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                xDif = Math.Abs(parGravy.position.x - parGravy2.position.x);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                yDif = Math.Abs(parGravy.position.y - parGravy2.position.y);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                zDif = Math.Abs(parGravy.position.z - parGravy2.position.z);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                xLim = parGravy.transform.localScale.x / \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e + \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tparGravy2.transform.localScale.x / \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                yLim = parGravy.transform.localScale.y / \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e + \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tparGravy2.transform.localScale.y / \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                zLim = parGravy.transform.localScale.z / \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e + \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tparGravy2.transform.localScale.z / \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                xPenet = xLim - xDif;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                yPenet = yLim - yDif;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                zPenet = zLim - zDif;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                minPen = Math.Min(xPenet, Math.Min(yPenet, zPenet));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the game when two object collide with each other normally their behavior will be result on rotation of the one object:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/81522783/158060464-4ae880a9-8a62-4ba6-82ae-b1077811c72b.png\" alt=\"Pasted image 20210702002447\"\u003e\u003c/p\u003e\n\u003cp\u003eHowever, we want them to move together without rotation like the following image. To provide this behavior, contact normal equation is changed. New contact normal is equal to normal direction of the contact surface (it is not related to the centers of the colliding objects).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/81522783/158060451-038d9ede-c68c-470c-b38a-21d92fad7559.png\" alt=\"Pasted image 20210702002414\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (xDif \u0026lt; xLim \u0026amp;\u0026amp; yDif \u0026lt; yLim \u0026amp;\u0026amp; zDif \u0026lt; zLim)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.inverseMass == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u0026amp;\u0026amp; parGravy2.inverseMass == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t{ \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e//get contact normal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Vector3d conNormal = Vector3d.normalize(parGravy.position\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t- parGravy2.position);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e//get relative velocity of the objects\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (minPen == xPenet)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                           \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.x \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal = \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.x \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal =\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(-\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.x == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal =\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (minPen == yPenet)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.y \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal =\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.y \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal =\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, -\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.y == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal =\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (minPen == zPenet)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                          \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.z \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal = \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.z \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal = \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, -\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (parGravy.velocity.z == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { conNormal = \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Vector3d(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"contact-resolution\"\u003eContact Resolution\u003c/h4\u003e\n\u003cp\u003eClassical contact resolution described in the Cyclone Engine \u003csup id=\"fnref1:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e is used for the contact resolution.\u003c/p\u003e\n\u003ch3 id=\"gravitational-effects\"\u003eGravitational Effects\u003c/h3\u003e\n\u003cp\u003eMain aim of the game is using different gravitational directions to do that three scripts are developed. Only some of the game objects in the scene have these effects.\u003c/p\u003e\n\u003ch4 id=\"apply-gravity\"\u003eApply Gravity\u003c/h4\u003e\n\u003cp\u003eAttached objects will be subjected to normal -y direction gravity.\u003c/p\u003e\n\u003ch4 id=\"gravity-direction\"\u003eGravity Direction\u003c/h4\u003e\n\u003cp\u003eAttached objects will have gravity force acted on predefined direction. Player cannot change it during the game.\u003c/p\u003e\n\u003ch4 id=\"change-gravity\"\u003eChange Gravity\u003c/h4\u003e\n\u003cp\u003eAttached objects\u0026rsquo; gravity forces are subjected to change by player. Player can chose any of the 6 surface for the gravity direction.\u003c/p\u003e\n\u003ch1 id=\"literature-survey\"\u003eLiterature Survey\u003c/h1\u003e\n\u003cp\u003eFollowing papers are not directly related to game development. They are  investigating relationship between cognitive skills and 3D puzzle games. Therefore they were not helpful for the design of the game but they gave insight about the different applications of the games.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eShute, V. J., Ventura, M., \u0026amp; Ke, F. (2015). The power of play: The effects of Portal 2 and Lumosity on cognitive and noncognitive skills. Computers and Education, 80, 58–67. \u003ca href=\"https://doi.org/10.1016/j.compedu.2014.08.013\"\u003ehttps://doi.org/10.1016/j.compedu.2014.08.013\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOei, A. C., \u0026amp; Patterson, M. D. (2014). Playing a puzzle video game with changing requirements improves executive functions. Computers in Human Behavior, 37, 216–228. \u003ca href=\"https://doi.org/10.1016/j.chb.2014.04.046\"\u003ehttps://doi.org/10.1016/j.chb.2014.04.046\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVanMeerten, N., Varma, K., Gravelle, M., Miller, N., Kraikul, E., \u0026amp; Fatemi, F. (2019). Evidence of a Relationship Between Mental Rotation Skills and Performance in a 3D Puzzle Game. Frontiers in Education, 4(August), 1–6. \u003ca href=\"https://doi.org/10.3389/feduc.2019.00082\"\u003ehttps://doi.org/10.3389/feduc.2019.00082\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdams, D. M., Pilegard, C., \u0026amp; Mayer, R. E. (2016). Evaluating the Cognitive Consequences of Playing Portal for a Short Duration. Journal of Educational Computing Research, 54(2), 173–195. \u003ca href=\"https://doi.org/10.1177/0735633115620431\"\u003ehttps://doi.org/10.1177/0735633115620431\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"limitations\"\u003eLimitations\u003c/h1\u003e\n\u003cp\u003eOriginally I also planned to implement friction effects in the game and a third power where player can control all of the objects in the scene, however they are not part of the final build of the game due to time restrictions.\u003c/p\u003e\n\u003cp\u003eThe second issue is controlling the avatar. Avatar \u003cstrong\u003eposition\u003c/strong\u003e directly updated based on the input from the keyboard. However, when we update the position directly, it is not subjected to the physics rules and collision detection. To solve that I have tried to assign velocity and acceleration and use these external effects in the \u003cstrong\u003eintegration\u003c/strong\u003e to move the avatar using physics engine. However, I could not manage to use this approach, avatar moves more than expected.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (Input.GetAxis(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Vertical\u0026#34;\u003c/span\u003e) != \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ver = Input.GetAxis(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Vertical\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            playerObje = Particle.MovePlayer(Time.deltaTime * ver * \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e * rot,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tplayerObje);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (Input.GetAxis(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Horizontal\u0026#34;\u003c/span\u003e) != \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            hor = Input.GetAxis(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Horizontal\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            playerObje = Particle.MovePlayer(Time.deltaTime * hor * \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e * \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\trot2, playerObje);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"contribution\"\u003eContribution\u003c/h1\u003e\n\u003cp\u003eThe main contribution of this project is developing a game with changing gravitation effects. This changing gravity direction mechanics can lead to different game mechanics and potential 3D puzzles.\u003c/p\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eMillingtan, I. (2010). Game physics engine development : how to build a robust commercial-grade physics engine for your game (2nd ed.). \u003ca href=\"https://www.sciencedirect.com/book/9780123819765/game-physics-engine-development\"\u003ehttps://www.sciencedirect.com/book/9780123819765/game-physics-engine-development\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref1:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n","description":"","image":"/images/ATLAS.png","permalink":"https://zaltinsoy.github.io/projects/atlas/","title":"ATLAS"}]